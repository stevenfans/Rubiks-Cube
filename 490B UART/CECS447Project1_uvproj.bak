// 0.Documentation Section 
// main.c
// Project 1: DAC - Tone Generator
// Authors: Seungjun Jeon, Cody Huang
// Date: September 30th, 2019

// 1. Pre-processor Directives Section
// Constant declarations to access port registers using 
// symbolic names instead of addresses

#include "SysTick.h"
#include "tm4c123gh6pm.h"
#include "PLL.h"


// 2. Declarations Section
//   Global Variables
unsigned int mode = 0;

//   Function Prototypes
void DAC_Init(void);
void PortF_Init(void);
void ADC_In2(unsigned long *);
void ADC_Init2(void);

void EnableInterrupts(void);
unsigned int getDelay(unsigned long ADCvalue);
// Waves
void sawToothWave(void);
void triangleWave(void);
void squareWave(void);
void sineWave(unsigned int Delay);

 
void WaitForInterrupt(void);
void DisableInterrupts(void);
const unsigned char SineWave[101] = {
	0x80,0x88,0x90,0x98,0xA0,0xA7,0xAF,0xB7,0xBE,0xC5,0xCB,0xD2,0xD7,0xDD,0xE3,
  0xE7,0xEC,0xF0,0xF4,0xF7,0xF9,0xFC,0xFD,0xFE,0xFF,0xFF,0xFF,0xFE,0xFD,0xFC,0xF9,
  0xF7,0xF4,0xF0,0xEC,0xE7,0xE3,0xDD,0xD7,0xD2,0xCB,0xC5,0xBE,0xB7,0xAF,0xA7,0xA0,0x98,0x90,0x88,
					0x80,0x78,0x70,0x68,0x60,0x59,0x51,0x49,0x42,0x3b,0x35,0x2e,0x29,0x23,0x1d,0x18,0x14,0x10,0x0c,0x09,
					0x06,0x04,0x02,0x01,0x00,0x00,0x00,0x01,0x02,0x04,0x06,0x09,0x0c,0x10,0x14,0x18,0x1d,0x23,0x29,0x2e,
					0x35,0x3b,0x42,0x49,0x51,0x59,0x60,0x68,0x70,0x78,0x80
																		};






// 3. Subroutines Section
// MAIN: Mandatory for a C Program to be executable
int main(void){    
	unsigned long potentiometer;
	unsigned	Delay;
	DAC_Init();
	PortF_Init();
	PLL_Init();
	SysTick_Init();
  EnableInterrupts();  
	ADC_Init2(); //PE1
	GPIO_PORTB_DATA_R = 0x00; //Initialize Port B to 0x00
	mode = 0;
	
  while(1){
		
		if (mode == 0) {
			sawToothWave();
		} 
		else if (mode == 1) {
			triangleWave();
		} 
		else if (mode == 2) {
			sineWave(16000);
		} 
		else if (mode == 3) {
			squareWave();
		}
		else if (mode == 4 ) {
			ADC_In2(&potentiometer);
			Delay = getDelay(potentiometer);
			sineWave(Delay);
		}
		}
	}

void GPIOPortF_Handler(void) { // called on touch of SW1
	
  
	GPIO_PORTF_ICR_R = 0x10;   // acknowledge flag4
		GPIO_PORTB_DATA_R = 0x00; // Reset the DAC back to 0.
	if ( mode == 0 ) {
				mode = 1;
			} else if ( mode == 1 ) {
				mode = 2;
			} else if ( mode == 2 ) {
				mode = 3;
			} else if ( mode == 3 ) {
				mode = 4;}
				else if ( mode == 4 ) {
				mode = 0;}
				
		}
	




//Saw Tooth Wave at 60Hz
void sawToothWave(void) {
	unsigned int i;
	GPIO_PORTB_DATA_R = 0x00;
	for(i = 0; i < 256; i++) {
		GPIO_PORTB_DATA_R++;
		SysTick_Wait(3100);
	}
}
//Triangle Wave at 60 Hz
void triangleWave(void) {
	unsigned int i;	
	for(i = 0; i < 512; i++) {
		if(i <= 255){
		GPIO_PORTB_DATA_R++;
		SysTick_Wait(3100);}
		else{
		GPIO_PORTB_DATA_R--;
		SysTick_Wait(3100);
	}
}
}
//Square Wave at 60 Hz
void squareWave(void) {
	unsigned int i;
		for(i=0; i< 2; i++){
			GPIO_PORTB_DATA_R = 0xFF;
			SysTick_Wait(410000);
			GPIO_PORTB_DATA_R = 0x00;
			SysTick_Wait(410000);

	}
}

//Sine Wave at 262 Hz to 494 Hz
void sineWave(unsigned int Delay) {
	unsigned int i;
	for(i = 0; i < 101; i++) {
		GPIO_PORTB_DATA_R = SineWave[i];
		//16000 for 60Hz
		SysTick_Wait(Delay);
	}
}




void PortF_Init(void){ 
	volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;       // 1) activate clock for Port F
  delay = SYSCTL_RCGC2_R;             // allow time for clock to start
  GPIO_PORTF_LOCK_R |= 0x4C4F434B;    // 2) unlock GPIO Port F
  GPIO_PORTF_CR_R |= 0x10;            // allow changes to PF4-1
  GPIO_PORTF_AMSEL_R &= ~0x10;        // 3) disable analog on PF
  GPIO_PORTF_PCTL_R &= ~0x000FFFF0;   // 4) PCTL GPIO on PF4-0
  GPIO_PORTF_DIR_R |= 0x00;           // 5) PF4,PF0 in, PF3-1 out
  GPIO_PORTF_AFSEL_R &= ~0x10;        // 6) disable alt funct on PF4-1
  GPIO_PORTF_PUR_R |= 0x10;           // enable pull-up on PF4
  GPIO_PORTF_DEN_R = 0x10;            // 7) enable digital I/O on PF4-0
	
	GPIO_PORTF_IS_R &= ~0x10;           // (d) PF4 is edge-sensitive
  GPIO_PORTF_IBE_R &= ~0x10;          //     PF4 is not both edges
  GPIO_PORTF_IEV_R |= 0x10;           //     PF4 rising edge event
  GPIO_PORTF_ICR_R = 0x10;            // (e) clear flag4
  GPIO_PORTF_IM_R |= 0x10;            // (f) arm interrupt on PF4
  NVIC_PRI7_R = (NVIC_PRI7_R&0xFF00FFFF)|0x00000000; // (g) priority 0
  NVIC_EN0_R |= 0x40000000;           // (h) enable interrupt 30 in NVIC
}

void DAC_Init(void){ 
	volatile unsigned long delay;
	SYSCTL_RCGC2_R          |= 0x00000002;             //  1) B clock
  delay = SYSCTL_RCGC2_R;                            //     delay 
  GPIO_PORTB_CR_R          = 0xFF;                   //     allow changes to PB7-0
	GPIO_PORTB_AMSEL_R      &= ~0xFF;                  //  2) disable analog function
  GPIO_PORTB_PCTL_R       &= ~0xFFFFFFFF;            //  3) GPIO clear bit PCTL  
  GPIO_PORTB_DIR_R        |= 0xFF;                   //  4) PB7 - PB0 output   
	GPIO_PORTB_AFSEL_R      &= 0xFF;                   //  5) no alternate function
	GPIO_PORTB_DEN_R        |= 0xFF;                   //  6) enable digital pins PB7 - PB0
}

void ADC_Init2(void){
  volatile unsigned long delay;
//  SYSCTL_RCGC0_R |= 0x00010000; // 1) activate ADC0 (legacy code)
  SYSCTL_RCGCADC_R |= 0x00000001; // 1) activate ADC0
  SYSCTL_RCGCGPIO_R |= SYSCTL_RCGCGPIO_R4; // 1) activate clock for Port E
  delay = SYSCTL_RCGCGPIO_R;      // 2) allow time for clock to stabilize
  delay = SYSCTL_RCGCGPIO_R;
  GPIO_PORTE_DIR_R &= ~0x02;      // 3) make PE1 input
  GPIO_PORTE_AFSEL_R |= 0x02;     // 4) enable alternate function on PE1
  GPIO_PORTE_DEN_R &= ~0x02;      // 5) disable digital I/O on PE1
                                  // 5a) configure PE4 as ?? (skip this line because PCTL is for digital only)
  GPIO_PORTE_PCTL_R = GPIO_PORTE_PCTL_R&0xFF00FF0F;
  GPIO_PORTE_AMSEL_R |= 0x02;     // 6) enable analog functionality on PE1
  ADC0_PC_R &= ~0xF;              // 8) clear max sample rate field
  ADC0_PC_R |= 0x1;               //    configure for 125K samples/sec
  ADC0_SSPRI_R = 0x3210;          // 9) Sequencer 3 is lowest priority
  ADC0_ACTSS_R &= ~0x0004;        // 10) disable sample sequencer 2
  ADC0_EMUX_R &= ~0x0F00;         // 11) seq2 is software trigger
  ADC0_SSMUX2_R = 0x0892;         // 12) set channels for SS2
  ADC0_SSCTL2_R = 0x0600;         // 13) no D0 END0 IE0 TS0 D1 END1 IE1 TS1 D2 TS2, yes END2 IE2
  ADC0_IM_R &= ~0x0004;           // 14) disable SS2 interrupts
  ADC0_ACTSS_R |= 0x0004;         // 15) enable sample sequencer 2
}

void ADC_In2(unsigned long *ain2){
  ADC0_PSSI_R = 0x0004;            // 1) initiate SS2
  while((ADC0_RIS_R&0x04)==0){};   // 2) wait for conversion done
  *ain2 = ADC0_SSFIFO2_R&0xFFF;    // 3A) read first result
  ADC0_ISC_R = 0x0004;             // 4) acknowledge completion
}

unsigned int getDelay(unsigned long ADCvalue)
{
	unsigned percentage = ADCvalue/40;
	unsigned delay;
	if (percentage >= 100)	
	{
			delay = 1603;
	}
	else if (percentage == 0)
	{
			delay = 3023;
	}
	else
	{
			delay = 3023 - (((percentage)*1420)/100);
	}
	return delay;
}


